// Mocks generated by Mockito 5.4.5 from annotations
// in task/test/test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task/core/services/calendar_service.dart' as _i7;
import 'package:task/features/auth/domain/entities/user.dart' as _i2;
import 'package:task/features/auth/domain/repositories/auth_repository.dart'
    as _i6;
import 'package:task/features/tasks/domain/entities/task.dart' as _i5;
import 'package:task/features/tasks/domain/repositories/task_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppUser_0 extends _i1.SmartFake implements _i2.AppUser {
  _FakeAppUser_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Task>> getTasks() => (super.noSuchMethod(
        Invocation.method(#getTasks, []),
        returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
      ) as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Stream<List<_i5.Task>> getTasksStream() => (super.noSuchMethod(
        Invocation.method(#getTasksStream, []),
        returnValue: _i4.Stream<List<_i5.Task>>.empty(),
      ) as _i4.Stream<List<_i5.Task>>);

  @override
  _i4.Future<void> addTask(_i5.Task? task) => (super.noSuchMethod(
        Invocation.method(#addTask, [task]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTask(_i5.Task? task) => (super.noSuchMethod(
        Invocation.method(#updateTask, [task]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(#deleteTask, [id]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i6.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AppUser> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(#signInWithGoogle, []),
        returnValue: _i4.Future<_i2.AppUser>.value(
          _FakeAppUser_0(this, Invocation.method(#signInWithGoogle, [])),
        ),
      ) as _i4.Future<_i2.AppUser>);

  @override
  _i4.Future<_i2.AppUser> signInWithEmailPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#signInWithEmailPassword, [email, password]),
        returnValue: _i4.Future<_i2.AppUser>.value(
          _FakeAppUser_0(
            this,
            Invocation.method(#signInWithEmailPassword, [email, password]),
          ),
        ),
      ) as _i4.Future<_i2.AppUser>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(#signOut, []),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.AppUser> registerWithEmailPassword(
    String? email,
    String? password,
    String? displayName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#registerWithEmailPassword, [
          email,
          password,
          displayName,
        ]),
        returnValue: _i4.Future<_i2.AppUser>.value(
          _FakeAppUser_0(
            this,
            Invocation.method(#registerWithEmailPassword, [
              email,
              password,
              displayName,
            ]),
          ),
        ),
      ) as _i4.Future<_i2.AppUser>);

  @override
  _i4.Future<void> sendPasswordResetEmail(String? email) => (super.noSuchMethod(
        Invocation.method(#sendPasswordResetEmail, [email]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.AppUser>> searchUsers(String? query) =>
      (super.noSuchMethod(
        Invocation.method(#searchUsers, [query]),
        returnValue: _i4.Future<List<_i2.AppUser>>.value(<_i2.AppUser>[]),
      ) as _i4.Future<List<_i2.AppUser>>);
}

/// A class which mocks [CalendarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarService extends _i1.Mock implements _i7.CalendarService {
  MockCalendarService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> getDefaultCalendarId() => (super.noSuchMethod(
        Invocation.method(#getDefaultCalendarId, []),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> addOrUpdateEvent({
    required String? title,
    required DateTime? start,
    required DateTime? end,
    String? description,
    String? existingEventId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#addOrUpdateEvent, [], {
          #title: title,
          #start: start,
          #end: end,
          #description: description,
          #existingEventId: existingEventId,
        }),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<bool> deleteEvent(String? eventId) => (super.noSuchMethod(
        Invocation.method(#deleteEvent, [eventId]),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
